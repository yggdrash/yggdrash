import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
    id 'org.springframework.boot' version '2.1.5.RELEASE' apply false
    id 'com.google.protobuf' version '0.8.7'
    id 'com.palantir.docker' version '0.21.0'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'org.sonarqube' version '2.7'
}

apply plugin: 'java'
apply plugin: 'idea'

group = 'io.yggdrash'
version = '0.10.0-SNAPSHOT'

defaultTasks ':yggdrash-node:bootRun'

ext {
    grpcVersion         = '1.20.0'
    protobufVersion     = '3.7.1'
    levelDBVersion      = '0.11'
    ehcacheVersion      = '3.7.1'
    scastleVersion      = '1.58.0.0'
    commonsCodecVersion = '1.11'
    commonsIOVersion    = '2.6'
    gsonVersion         = '2.8.5'
    jsonSimpleVersion   = '1.1'
    jacksonVersion      = '2.9.8'
    typesafeVersion     = '1.3.3'
    logbackVersion      = '1.2.3'
    annotationVersion   = '1.3.2'
    assertjVersion      = '3.11.1'
    commonLangVersion   = '3.8.1'
    collectionsVersion  = '4.2'
    logbackEsAppenderVersion  = '1.6'
    logbackJinoVersion  = '3.0.12'
    equinoxVersion = '3.13.0.v20180226-1711'
    set('elasticsearch.version', '7.0.1')
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}


allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'project-report'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'

    jacoco {
        toolVersion = '0.8.2'
    }

    checkstyle {
        ignoreFailures = true
        toolVersion = '8.15'
        maxWarnings = 0
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    compileJava {
        sourceCompatibility = 1.8  // can be switched to 11 for testing
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
        // options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    test {
        failFast = true
        systemProperty('spring.profiles.active', project.properties.get('springProfiles'))
        systemProperty('yggdrash.key.password', 'Aa1234567890!')

        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
}

def resourceContractPath = rootProject.file('resources/contract')


task copyContractToCore(type: Copy) {
     def coreContractPath = file('yggdrash-core/.yggdrash/contract')
    coreContractPath.mkdirs()

    from resourceContractPath
    into coreContractPath
}

task copyContractToNode(type: Copy) {
    def nodeContractPath = file('yggdrash-node/.yggdrash/contract')
    nodeContractPath.mkdirs()

    from resourceContractPath
    into nodeContractPath
}

task copyContractToProject(type: Copy) {
    def projectContractPath = file('.yggdrash/contract')
    projectContractPath.mkdirs()

    from resourceContractPath
    into projectContractPath

}

task copyBranchJsonToProject(type: Copy) {
    def branchConfPath = file('yggdrash-core/src/main/resources/branch')
    def testBranchConfPath = file('.yggdrash/branch')

    from branchConfPath
    into testBranchConfPath
}

task copyBranchJsonToNode(type: Copy) {
    def branchConfPath = file('yggdrash-core/src/main/resources/branch')
    def testBranchConfPath = file('yggdrash-node/.yggdrash/branch')

    from branchConfPath
    into testBranchConfPath
}

project(':yggdrash-core') {
    apply plugin: 'com.google.protobuf'

    dependencies {
        compile project(':yggdrash-common')
        compile 'com.rabbitmq:amqp-client:5.7.3'
        compile "io.grpc:grpc-services:${grpcVersion}"
        compile "io.grpc:grpc-netty:${grpcVersion}"
        compile "com.google.protobuf:protobuf-java-util:${protobufVersion}"
        compile "org.ehcache:ehcache:${ehcacheVersion}"
        compile "com.typesafe:config:${typesafeVersion}"
        compile 'org.beryx:text-io:3.3.0'
        compileOnly "javax.annotation:javax.annotation-api:${annotationVersion}"
        testCompile "org.mockito:mockito-core:1.+"
        testCompile "org.assertj:assertj-core:${assertjVersion}"
    }

    protobuf {
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }

    sourceSets {
        main {
            java {
                srcDirs 'build/generated/source/proto/main/grpc'
                srcDirs 'build/generated/source/proto/main/java'
            }
        }
    }

    test {
        dependsOn copyContractToCore

        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
}

project(':yggdrash-validator') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compile project(':yggdrash-core')
        compile "org.springframework.boot:spring-boot-starter"
        testCompile project(':yggdrash-core').sourceSets.test.output
        testCompile "com.vmlens:concurrent-junit:1.0.2"
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "io.grpc:grpc-testing:${grpcVersion}"
        testCompile group: 'org.mongodb', name: 'bson', version: '3.10.1'
    }

    configurations {
        compile.exclude module: 'spring-boot-starter-tomcat'
    }

    jar {
        classifier = 'classes'
        enabled = true
    }

    bootJar {
        enabled = true
    }
}

project(':yggdrash-node') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compile project(':yggdrash-validator')
        compile project(':yggdrash-gateway')
        compile 'com.rabbitmq:amqp-client:5.7.3'
        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.springframework.cloud:spring-cloud-starter:2.0.0.RELEASE"
        compile "com.github.briandilley.jsonrpc4j:jsonrpc4j:1.5.3"
        compile "org.codehaus.janino:janino:${logbackJinoVersion}"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        //Must be disable in osgi
//        runtime "org.springframework.boot:spring-boot-devtools"
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "io.grpc:grpc-testing:${grpcVersion}"
        testCompile project(':yggdrash-core').sourceSets.test.output
    }

    configurations {
        compile.exclude module: 'spring-boot-starter-tomcat'
        compile.exclude module: 'spring-security-rsa'
    }

    docker {
        dependsOn build
        dockerfile rootProject.file('docker/Dockerfile')
        name "yggdrash/${bootJar.baseName}"
        files bootJar.archivePath
        buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
    }

    bootJar {
        archiveName = "${project.name}-exec.jar"
        manifest {
            attributes("Implementation-Version": rootProject.version)
        }
        launchScript()
    }

    task customJar(type: BootJar) {
        archiveName = "${project.name}.jar"
        mainClassName = 'io.yggdrash.node.YggdrashNodeApp'

        with bootJar
    }
    bootJar.dependsOn customJar
    
    test {
        dependsOn copyContractToNode, copyBranchJsonToNode, copyBranchJsonToProject

        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
}

project(':yggdrash-gateway') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compile project(':yggdrash-core')
        compile "org.springframework.boot:spring-boot-starter-undertow"
        compile "org.springframework.boot:spring-boot-starter-websocket"
        compile "org.elasticsearch.client:elasticsearch-rest-high-level-client"
        compile "com.internetitem:logback-elasticsearch-appender:${logbackEsAppenderVersion}"
        compile "org.webjars:sockjs-client:1.1.2"
        compile "org.webjars:stomp-websocket:2.3.3"
        compile "org.webjars:bootstrap:3.3.7"
        compile "org.webjars:webjars-locator-core"
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile project(':yggdrash-core').sourceSets.test.output
    }

    jar {
        classifier = 'classes'
        enabled = true
    }

    bootJar {
        enabled = false
    }
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    sourceDirectories.from = subprojects.sourceSets.main.allSource.srcDirs
    classDirectories.from = subprojects.sourceSets.main.output
    executionData.from = subprojects.jacocoTestReport.executionData

    afterEvaluate {
        classDirectories.from = classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['io/yggdrash/proto/**']
            )
        }
    }

    reports {
        html.enabled = true // For Developer
        xml.enabled = true // For coveralls
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

sonarqube {
    properties {
        property "sonar.exclusions", "**/io/yggdrash/proto/*, **/io/yggdrash/common/crypto/**"
    }
}

// TODO delete using scanning each project
// usage: ./gradlew cleanConfig -q
task cleanConfig(type: Delete) {
    println('# Clean YGGDRASH Config in All modules')
    delete '.yggdrash'
    delete 'yggdrash-core/.yggdrash'
    delete 'yggdrash-node/.yggdrash'
    delete 'contracts/.yggdrash'
    delete 'yggdrash-validator/.yggdrash'

    println('# Clean tmp dirs')
    delete 'yggdrash-core/tmp'
    delete 'yggdrash-node/tmp'
    delete 'contracts/tmp'
    delete 'yggdrash-validator/tmp'
}